{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "def rule3(dA,dB):\n",
    "    dQ = np.sqrt(dA**2+dB**2)\n",
    "    return dQ"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def rule4(A,dA,B,dB,C,dC,m,n,p):\n",
    "    dQ = np.sqrt((m*dA/A)**2+(n*dB/B)**2+(p*dC/C)**2)*Q\n",
    "    return dQ"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "69.1 0.31622776601683794\n"
     ]
    }
   ],
   "source": [
    "L = 1.05\n",
    "dL = 0.001\n",
    "nL = 0.00125\n",
    "dnL = 0.00001\n",
    "Ti = 23.4\n",
    "Tf = 92.5\n",
    "dTi = 0.3\n",
    "dTf = 0.1\n",
    "\n",
    "\n",
    "T = Tf - Ti\n",
    "dT = np.sqrt(dTf**2+dTi**2)\n",
    "print(T,dT)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "alpha= 1.722830955826614e-05 1.596296282604527e-07 per Celsius\n"
     ]
    }
   ],
   "source": [
    "a = nL/L/T\n",
    "da = np.sqrt((1*dnL/nL)**2+(-1*dL/L)**2+(-1*dT/T)**2)*a\n",
    "print(\"alpha=\",a,da,\"per Celsius\")\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
